from typing import Union, Tuple

import pandas as pd
import pathlib
import numpy as np


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = data_fname if isinstance(data_fname, pathlib.Path) else pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError('Missing File!')
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """
        return np.histogram(self.data['age'], bins=np.array([i*10 for i in range(11)]))

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """

        mail = self.data['email'].to_numpy(dtype=str)
        cond_1 = (np.char.count(mail, '@', 1, -1) == 1) * (np.char.count(mail, '@', 0, 1) == 0) * (
                np.char.count(mail, '@', -1) == 0)
        cond_2 = (np.char.count(mail, '.', 1, -1) == 1) * (np.char.count(mail, '.', 0, 1) == 0) * (
                np.char.count(mail, '.', -1) == 0)
        idx = np.char.find(mail, '@', 1, -1) + 1
        dot = np.array([mail[i][idx[i]] for i in range(len(idx))])
        cond_3 = np.char.not_equal(dot, '.')

        keep = cond_1 * cond_2 * cond_3

        return self.data.iloc[keep, :].reset_index(drop=True)

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        new_data = self.data.copy()
        questions = np.transpose(self.data.loc[:, 'q1':'q5'])
        questions = questions.fillna(questions.mean())
        new_data.loc[:, 'q1':'q5'] = np.transpose(questions)

        idx = np.array(range(100))
        row_idx = np.sum(self.data.loc[:, 'q1':'q5'].isnull(), axis=1) > 0

        return new_data, idx[row_idx]

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        new_data = self.data.copy()
        new_data['score'] = np.floor(np.transpose(self.data.loc[:, 'q1':'q5']).mean()).astype("UInt8")
        nans_per_sub = np.sum(self.data.loc[:, 'q1':'q5'].isnull(), axis=1)
        new_data['score'][nans_per_sub > maximal_nans_per_sub] = None

        return new_data

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
        new_data = self.data.loc[self.data['age'].notna(), :]
        arrays = [np.array(new_data.index), new_data['gender'], new_data['age'] > 40]
        indx = pd.MultiIndex.from_arrays(arrays)
        new_data.index = indx

        result = new_data.groupby(level=[1, 2]).mean()

        return result.drop(columns=['age', 'id'])








